{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mobster","text":"<p>The Mobster project is a Python-based tool and ecosystem to work with SBOM (Software Bill of Materials) documents. Its goal is to provide unified interface for generating, manipulating and consuming SBOM documents in various formats.</p> <p>The tools is designed to cover a whole lifecycle of SBOM documents. The major stages are:</p> <ul> <li>Generation: Generate SBOMs document from various sources (Syft, Hermeto, etc.)</li> <li>Augmentation: Augment SBOM documents with additional information that are not   present in the phase of generation. This phase is usually done in the   release phase where we know more information about the software.</li> <li>Validation: Validate a quality of the SBOM document in different stages   of the lifecycle. The validation is done by the Product Security team   guidelies.</li> <li>Distribution: Distribute the SBOM document to various set of locations (e.g. Trusted   Profile Analyzer, container registry, etc.)</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<p>To use the Mobster tool, you need to install it first. There are multiple ways to isnstall the tool:</p>"},{"location":"#using-pip","title":"Using pip","text":"<pre><code>pip install mobster\nmobster --help\n</code></pre>"},{"location":"#using-container-image","title":"Using container image","text":"<pre><code>podman pull quay.io/konflux-ci/mobster:latest\npodman run -it quay.io/konflux-ci/mobster:latest mobster --help\n</code></pre>"},{"location":"#development-environment","title":"Development environment","text":"<p>Follow an instruction in the development-environment.md file to set up your development environment.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to the Mobster project! If you would like to contribute, please follow these steps:</p> <ol> <li>Fork the repository</li> <li>Create a new branch for your feature or bug fix</li> <li>Make your changes and commit them with a clear message (following the    conventional commit format)    (e.g. <code>feat: add new feature</code> or <code>fix: fix a bug</code>)</li> <li>Open a pull request to the main repository</li> <li>Make sure the CI checks pass and the code is properly formatted</li> <li>Wait for the review and address any comments or suggestions</li> <li>Once your changes are approved, they will be merged into the main branch</li> <li>Congratulations! You have successfully contributed to the Mobster project</li> </ol>"},{"location":"#release-process","title":"Release process","text":"<p>The release process is automated using GitHub Actions and Konflux. The process is described in detail in the release.md file.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation for the Mobster project is available in the docs directory.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"development-environment/","title":"Dev environment","text":""},{"location":"development-environment/#setup","title":"Setup","text":"<ol> <li>Install Poetry</li> <li>Install an environment with Poetry</li> <li><code>poetry install</code></li> <li>This will create a virtual environment in <code>.venv</code> and install all dependencies</li> <li>You can also use <code>poetry shell</code> to activate the virtual environment</li> <li>Install pre-commit hooks</li> </ol> <p>Note: You can also use a custom virtual environment based on your preference.</p>"},{"location":"development-environment/#git-leaks-detection","title":"Git leaks detection","text":"<p>Since the repository currently contains secret information in various encrypted forms there is high chance that developer may push a commit with decrypted secrets by mistake. To avoid this problem we recommend to use <code>Gitleaks</code> tool that prevent you from commit secret code into git history.</p> <p>The repository is already pre-configured but each developer has to make final config changes in his/her environment.</p> <p>Follow the documentation to configure Gitleaks on your computer.</p>"},{"location":"development-environment/#package-management","title":"Package management","text":"<p>The project uses Poetry for package management. You can use the following commands to manage packages:</p> <ul> <li><code>poetry add &lt;package&gt;</code>: Add a package to the project</li> <li><code>poetry add --group dev &lt;package&gt;</code>: Add a package to the development group</li> <li><code>poetry remove &lt;package&gt;</code>: Remove a package from the project</li> <li><code>poetry update</code>: Update all packages to their latest versions</li> <li><code>poetry install</code>: Install all packages listed in the <code>pyproject.toml</code> file</li> <li><code>poetry lock</code>: Lock the dependencies to their current versions</li> </ul> <p>The Petry project uses <code>poetry.lock</code> file to lock the dependencies to their current versions. This file is automatically generated by Poetry when you run <code>poetry install</code> or <code>poetry update</code>. You should not edit this file manually.</p>"},{"location":"development-environment/#tox","title":"Tox","text":"<p>The project uses Tox for testing and linting. You can use the following commands to run Tox:</p> <ul> <li><code>tox</code>: Run all tests and linters</li> <li><code>tox -e &lt;env&gt;</code>: Run a specific environment (e.g. <code>tox -e test</code> to run tests )</li> <li><code>tox -e &lt;env&gt; -- &lt;args&gt;</code>: Run a specific environment with additional arguments (e.g. <code>tox -e test -- -v</code> to run tests for with verbose output)</li> </ul>"},{"location":"development-environment/#code-formatting","title":"Code formatting","text":"<p>The project uses Ruff for code checking and formatting. You can use the following commands to check and format the code:</p> <ul> <li><code>tox -e ruff</code>: Run Ruff to check the code</li> </ul> <p>We highly recommend to configure your IDE to run Ruff on save. This will help you to keep the code clean and consistent.</p>"},{"location":"development-environment/#testing","title":"Testing","text":"<p>The project uses Pytest for testing. You can use the following commands to run tests:</p> <ul> <li><code>tox -e test</code>: Run all tests</li> <li><code>tox -e test -- -v</code>: Run all tests with verbose output</li> <li><code>tox -e test -- -k &lt;test_name&gt;</code>: Run a specific test (e.g. <code>tox -e test -- -k test_example</code> to run the test named <code>test_example</code>)</li> </ul>"},{"location":"development-environment/#integration-tests","title":"Integration Tests","text":"<p>The integration tests require external services to be running. These services are provided locally via Docker Compose.</p> <ol> <li> <p>Start the test services: <code>bash    docker compose up -d</code></p> </li> <li> <p>Run the integration tests: <code>bash    tox -e test-integration</code></p> </li> </ol>"},{"location":"development-environment/#building-the-container-image","title":"Building the container image","text":"<p>The project contains a Containerfile that can be used to build a container image. You can use the following command to build the image:</p> <pre><code>podman build -t &lt;image_name&gt; .\n</code></pre> <p>Replace <code>&lt;image_name&gt;</code> with the name you want to give to the image.</p> <p>Then you can run the image using the following command:</p> <pre><code>podman run -it &lt;image_name&gt;\n</code></pre> <p>Replace <code>&lt;image_name&gt;</code> with the name of the image you built.</p>"},{"location":"integration-testing/","title":"Integration testing in Konflux","text":"<p>This repository automatically deploys integration tests within Konflux on contributions. The tekton Pipeline responsible for running integration tests in located in <code>hack/integration/mobster-test.yml</code>.</p>"},{"location":"integration-testing/#integration-tests-as-a-pipeline","title":"Integration tests as a Pipeline","text":"<p>The integration test Pipeline uses Sidecars for dependencies (to reduce config needed). To properly configure the Sidecars, the Pipeline first parses the Konflux SNAPSHOT, locates the revision and clones the repository to a workspace <code>relevant-data</code> to a folder <code>SOURCE_CODE</code>. Tests are then performed using the image referenced within the SNAPSHOT and the cloned source code.</p> <p>To correctly provision a Pipeline with a Workspace, this test must also define a PipelineRun (<code>hack/integration/mobster-test-run.yml</code>). However, the default Konflux integration test accounts for executing a Pipeline, therefore we have to modify  the IntegrationTestScenario object, to change <code>spec.resolverRef.resourceKind</code> to value <code>pipelinerun</code>.</p> <p>CAUTION: Currently, there is a discovered bug that reverts this change on every UI update on the IntegrationTestScenario, so the Scenario should only be updated using <code>oc apply</code>.</p>"},{"location":"integration-testing/#example-of-integrationtestscenario-update","title":"Example of IntegrationTestScenario update","text":"<pre><code>oc get integrationtestscenario mobster-test -o yaml &gt; current_scenario.yml\n</code></pre> <p>then visit the document, increment the value of <code>metadata.generation</code>, change the fields needed and use <code>oc apply -f modified_scenario.yml</code>.</p>"},{"location":"integration-testing/#used-images","title":"Used images","text":"<p>Mobster image used is the exact image built within the CI/CD in the previous step. There are some other Sidecars with already pre-built images, like <code>minio</code> or <code>zot</code>, but Mobster integration also requires a TPA image (preferably with a built-in database).</p> <p>To do this, Mobster's GH CI/CD also builds a custom TPA image and publishes it as a Konflux component.</p>"},{"location":"integration-testing/#updating-the-tests","title":"Updating the tests","text":"<p>Unfortunately the tests are sourced from a fixed revision, which is set to the main branch. If you wish to update the tests, you have to change the revision in the Konflux UI. The path in the repository should point to a PipelineRun, which should then refer to a Pipeline.</p> <p>If you change the setup in the UI, it changes the target revision for the whole repository. There is not an easy way to only experiment on a separate branch.</p> <p>To change the integration tests, you have to commit your changes of the PipelineRun (including the updated reference to a Pipeline) to a new branch, push it to the repository and change the UI revision to this new branch. Just keep in mind that integration tests in all branches will be affected, so you may want to disable the <code>mandatory</code> checkmark for the tests for the duration of your testing.</p>"},{"location":"release/","title":"Release","text":"<p>The repository uses automated release process that consists of combination of Github Actions and Konflux. The Github Actions take care of the release process for the Python package and the Konflux takes care of the release process for the container image.</p>"},{"location":"release/#github-release","title":"Github Release","text":"<p>The Mobster uses release-please CLI tool to automate the release process and generate the release notes. Unfortunately we can't use the release-please github action due to a security concern in the <code>konflux-ci</code> organization.</p> <p>Because of that the release process is done manually using the <code>release-please</code> CLI tool. The tool is used to generate the release notes and bump the version in the <code>pyproject.toml</code> file.</p>"},{"location":"release/#release-steps","title":"Release steps:","text":"<ol> <li>Pull the latest version from the repository. <code>git pull upstream main --tags</code></li> <li>Install the release-please CLI tool if not already installed</li> <li>Export the <code>GITHUB_TOKEN</code> environment variable with a personal access token    that has <code>repo</code> scope. This token is used to authenticate with GitHub API.    <code>bash    export GITHUB_TOKEN=&lt;your_personal_access_token&gt;</code></li> <li>Run <code>make open-release-pr</code> to generate the release pull request.</li> <li>For a dry-run, you can use <code>make open-release-pr-dry-run</code> to see what changes       would be made without actually creating the pull request.</li> <li>Review the generated pull request and merge it into the main branch.</li> <li>After the pull request is merged, run the following commands to create a new Github    release and tag the commit: <code>make github-release</code> (or <code>make github-release-dry-run</code> for a dry-run).</li> <li>This command will create a new tag in the format <code>vX.Y.Z</code></li> <li>It will also push the tag to the remote repository</li> <li>It creates a new Github release with auto-generated release notes</li> <li>It triggers a PyPi release</li> </ol>"},{"location":"release/#release-to-pypi","title":"Release to PyPI","text":"<p>A github action is used to release the Python package to PyPI. The action is triggered on every version tag (<code>vX.Y.Z</code>) being pushed to the repository. The tag event is generated from the previous release steps.</p> <p>After the tag is pushed, the Github action will be triggered and it will automatically build the package and upload it to PyPI.</p>"},{"location":"release/#release-to-registry","title":"Release to registry","text":"<p>The Konflux is used to build and release the container image to the registry. The Konflux is configured to build image for every open PR and also for every merged PR.</p> <p>The intermediate images are pushed to internal repository: - https://quay.io/repository/redhat-user-workloads/the-collective-tenant/mobster-f7a65</p> <p>The final externally available image is pushed to user facing repository: - https://quay.io/konflux-ci/mobster</p>"},{"location":"sboms/download/","title":"Downloading SBOMs with Mobster","text":"<p>The Mobster tool is capable of downloading SBOMs to multiple locations.</p>"},{"location":"sboms/download/#red-hat-trusted-profile-analyzer-tpa","title":"Red Hat Trusted Profile Analyzer (TPA)","text":"<p>To download an SBOM from TPA, use the <code>mobster download tpa</code> command. In order to authenticate to TPA, you need to set the following environment variables with OIDC, as in the example below</p> <pre><code>MOBSTER_TPA_SSO_TOKEN_URL=\"https://example.com/auth/realms/ExampleRealm/protocol/openid-connect/token\"\nMOBSTER_TPA_SSO_ACCOUNT=example-account\nMOBSTER_TPA_SSO_TOKEN=example-account-token\n</code></pre> <p>After that you can either download a single SBOM:</p> <pre><code>mobster download tpa \\\n    --tpa-base-url https://your-tpa-instance.com \\\n    --uuid {SBOM UIID} \\\n    --output /path/to/your/directory/\n</code></pre> <p>Or multiple SBOM files using a generic query:</p> <pre><code>mobster download tpa \\\n    --tpa-base-url https://your-tpa-instance.com \\\n    --query \"authors~mobster\" \\\n    --output /path/to/your/directory/\n</code></pre>"},{"location":"sboms/formats/","title":"SBOM formats","text":"<p>SBOM documents can be represented in a variety of formats. Each format was designed to adress different use cases and requirements, but they all aim to provide a comprehensive view of the software components and their relationships.</p> <p>The most common formats are:</p> <ul> <li>SPDX</li> <li>CycloneDX</li> </ul> <p>A Mobster tool can generate SBOMs in both formats, allowing users to choose the one that best fits their needs. However, the SPDX format is preferred by the Konflxu project and Red Hat Product Security.</p>"},{"location":"sboms/formats/#spdx","title":"SPDX","text":"<p>A standardized format for describing software licenses, copyright, and component metadata for compliance and security.</p> <p>A Mobster tool uses the official spdx-tools Python library to generate SBOMs in the SPDX format and validate them.</p> <p>A currently supported SPDX schema version is 2.3.</p>"},{"location":"sboms/formats/#cyclonedx","title":"CycloneDX","text":"<p>A lightweight, security-focused BOM format for detailing components, dependencies, and vulnerabilities.</p> <p>A Mobster tool uses the official cyclonedx-python-lib Python library to generate SBOMs in the CycloneDX format and validate them.</p> <p>A currently supported CycloneDX schema version is 1.6.</p>"},{"location":"sboms/modelcar_sbom/","title":"Modelcar SBOM","text":"<p>The Mobster tool is capable of generating SBOMs for modelcar based on the guidelines from the Red Hat Product Security.</p>"},{"location":"sboms/modelcar_sbom/#usage","title":"Usage","text":"<pre><code>mobster generate \\\n    --output index.sbom.spdx.json \\\n    modelcar \\\n    --modelcar-image quay.io/example/modelcar:v22@sha256:cc6016b62f25d56507033c48b04517ba40b3490b1e9b01f1c485371311ed42c4 \\\n    --base-image quay.io/example/base:9.0@sha256:96fbb4c227d543011dfff0679a89ce664d1a009654858f2df28be504bc1863c1 \\\n    --model-image quay.io/example/model:v1@sha256:087dc7896b97911a582702b45ff1d41ffa3e142d0b000b0fbb11058188293cfc \\\n    --sbom-type spdx\n</code></pre> <p>List of arguments:</p> <ul> <li><code>---modelcar-image</code></li> <li>Modelcar image pullspec with digest (optional tag) <code>repository/image:tag@sha256:hexvalue</code></li> <li>Example value <code>quay.io/example/modelcar:v22@sha256:cc6016b62f25d56507033c48b04517ba40b3490b1e9b01f1c485371311ed42c4</code></li> <li><code>--base-image</code></li> <li>Modelcar base image pullspec with digest (optional tag) <code>repository/image:tag@sha256:hexvalue</code></li> <li>Example value <code>quay.io/example/modelcar:v22@sha256:cc6016b62f25d56507033c48b04517ba40b3490b1e9b01f1c485371311ed42c4</code></li> <li><code>--model-image</code></li> <li>Model image pullspec with digest (optional tag) <code>repository/image:tag@sha256:hexvalue</code></li> <li>Example value <code>quay.io/example/modelcar:v22@sha256:cc6016b62f25d56507033c48b04517ba40b3490b1e9b01f1c485371311ed42c4</code></li> <li><code>--output</code></li> <li>Path where the SBOM should be written</li> <li><code>--sbom-type</code></li> <li>Type of SBOM to generate (<code>spdx</code> or <code>cyclonedx</code>)</li> </ul>"},{"location":"sboms/modelcar_sbom/#example","title":"Example","text":"<p>The example SBOM generated by the above command is available in: - tests/data/modelcar_sbom.spdx.json. - tests/data/modelcar_sbom.cyclonedx.json.</p>"},{"location":"sboms/modelcar_sbom/#structure-of-the-generated-sbom","title":"Structure of the generated SBOM","text":"<p>The generated SBOM has following structure:</p> <pre><code> - SPDXRef-DOCUMENT\n    - SPDXRef-modelcar-image\n        - Base image (DESCENDANT_OF)\n        - Model image (DESCENDANT_OF)\n</code></pre> <p>The Cyclonedx SBOM has the equivalent structure:</p> <pre><code> - modelcar-image\n    - base-image\n    - model-image\n</code></pre> <p></p>"},{"location":"sboms/oci_artifact/","title":"SBOM for oci artifact","text":"<p>The Mobster tool is capable of generating SBOMs for OCI artifact that contains an content generated by the oci-copy tekton task.</p>"},{"location":"sboms/oci_artifact/#usage","title":"Usage","text":"<pre><code># Using an example oci-copy.yaml file generate the SBOM for the OCI artifact\nmobster generate \\\n    generate  \\\n    --output oci-copy.spdx.json \\\n    oci-artifact \\\n    --oci-copy-yaml sample-oci-copy.yaml \\\n    --image-pullspec quay.io/example/base:v1 \\\n    --image-digest sha256:087dc7896b97911a582702b45ff1d41ffa3e142d0b000b0fbb11058188293cfc \\\n    --sbom-type spdx\n\n</code></pre> <p>List of arguments:</p> <ul> <li><code>--image-pullspec IMAGE_PULLSPEC</code></li> <li>Image pullspec for the OCI image in the format /: <li><code>--image-digest IMAGE_DIGEST</code></li> <li>Image digest for the OCI image in the format sha256: <li><code>--oci-copy-yaml OCI_COPY_YAML</code></li> <li>Path to the OCI copy YAML file</li> <li>The file needs to follow the oci-copy schema</li> <li>Test example file is available at tests/data/sample-oci-copy.yaml</li> <li><code>--sbom-type {cyclonedx,spdx}</code></li> <li>Type of SBOM to generate (default: cyclonedx)</li>"},{"location":"sboms/oci_artifact/#example","title":"Example","text":"<p>The example SBOM generated by the above command is available in - tests/data/oci_artifact_sbom.spdx.json. - tests/data/oci_artifact_sbom.cyclonedx.json.</p>"},{"location":"sboms/oci_artifact/#structure-of-the-generated-sbom","title":"Structure of the generated SBOM","text":"<p>The generated SBOM has following structure:</p> <pre><code> - SPDXRef-DOCUMENT\n    - SPDXRef-oci-artifact-image (DESCRIBES)\n        - example-artifact-file.txt (CONTAINS)\n        - example-aimodel.gguf (CONTAINS)\n        - example-readme.md (CONTAINS)\n</code></pre> <p></p>"},{"location":"sboms/oci_image/","title":"Generate OCI Image","text":"<p>This utility allows users to generate SBOMs related to Container Images.</p>"},{"location":"sboms/oci_image/#architecture","title":"Architecture","text":"<p>The scripts accepts any number of SBOMs generated by SYFT and at most one SBOM generated by Hermeto (previously known as Cachi2), with the requirement that at least one SBOM is provided in total. It combines these SBOMs and takes them as a context of the built image.</p> <p>The script also parses a JSON-ified Dockerfile of the image, parses its content and determines which base images were used to build the image. It identifies builder images as well as a parent image which is the latest image in the Dockerfile (or the base image for the stage identified by the build target).</p> <p>Additionally, you can also supply additional builder images on top of those already parsed from the Dockerfile.</p> <p>All provided SBOMs must be in the same specification! This script does not support combining SPDX and CycloneDX SBOMs.</p>"},{"location":"sboms/oci_image/#usage","title":"Usage","text":"<pre><code>mobster --verbose  generate oci-image \\\n--from-syft tests/sbom/test_merge_data/cyclonedx/syft-sboms/pip-e2e-test.bom.json \\\n--from-syft tests/sbom/test_merge_data/cyclonedx/syft-sboms/ubi-micro.bom.json \\\n--from-hermeto tests/sbom/test_merge_data/cyclonedx/cachi2.bom.json \\\n--image-pullspec quay.io/foobar/examplecontainer:v10 \\\n--image-digest sha256:1 \\\n--parsed-dockerfile-path tests/data/dockerfiles/somewhat_believable_sample/parsed.json \\\n--dockerfile-target build \\\n--additional-base-image quay.io/ubi9:latest@sha256:123456789012345678901234567789012\n</code></pre>"},{"location":"sboms/oci_image/#list-of-arguments","title":"List of arguments","text":"<ul> <li><code>--from-syft</code> -- points to an SBOM file (in a JSON format) created by Syft, can be used multiple times</li> <li><code>--from-hermeto</code> -- points to an SBOM file (in a JSON format) created by Hermeto</li> <li><code>--image-pullspec</code> -- the pullspec of the image processed in the format <code>&lt;registry&gt;/&lt;repository&gt;:&lt;tag&gt;</code></li> <li><code>--image-digest</code> -- the digest of the image processed in the format <code>sha256:&lt;digest value&gt;</code></li> <li><code>--parsed-dockerfile-path</code> -- points to a dockerfile processed by <code>dockerfile-json</code></li> <li><code>--base-image-digest-file</code> -- points to a file with digests for images used in Dockerfile.   if omitted, the references will be fetched via <code>oras</code>. The expected format of the file is   <code>&lt;registry&gt;/&lt;repository&gt;:&lt;tag&gt; &lt;registry&gt;/&lt;repository&gt;:&lt;tag&gt;@sha256:&lt;digest&gt;</code></li> <li><code>--dockerfile-target</code> -- if a build target was used for multi-stage build, use this argument to specify the build target</li> <li><code>--additional-base-images</code> -- optionally add references to other build images outside the parsed Dockerfile.   expects the format <code>&lt;registry&gt;/&lt;repository&gt;:&lt;tag&gt;@sha256:&lt;digest value&gt;</code></li> <li><code>--contextualize</code> -- NOT IMPLEMENTED YET</li> <li><code>--output</code> -- where to save the SBOM. prints it to STDOUT if this is not specified</li> </ul>"},{"location":"sboms/oci_image/#structure-of-the-generated-sbom","title":"Structure of the generated SBOM","text":"<p>The generated SBOM has following structure:</p> <pre><code> - SPDXRef-DOCUMENT\n    - SPDXRef-image (DESCRIBES)\n        - package A (CONTAINS)\n        - package B (CONTAINS)\n        - base image (DESCENDANT_OF)\n        - builder image 1 (BUILD_TOOL_OF)\n        - builder image 2 (BUILD_TOOL_OF)\n</code></pre>"},{"location":"sboms/oci_image_augmentation/","title":"Component-level SBOM update via the augment commands","text":"<p>Build-time SBOMs generated by Konflux can be further augmented, to include information that is only known during a Konflux release, after the <code>push-snapshot</code> Task. This information comes from a \"mapped snapshot spec\" file, created by the <code>apply-mapping</code> task in a Konflux release pipeline. Examples include OCI image tags or the image's release repository.</p> <p>You can perform the augmentation via the mobster command: <code>augment oci-image</code>.</p>"},{"location":"sboms/oci_image_augmentation/#augment-oci-image","title":"Augment oci-image","text":"<p>You can either augment a specific OCI image by providing the optional <code>--reference</code> argument, or augment SBOMs for all images in the supplied snapshot:</p> <pre><code>$ mobster augment oci-image --output sboms/ oci-image \\\n    --reference quay.io/repo/image@sha256:&lt;digest&gt; \\\n    --snapshot snapshot.json\n\n$ mobster augment oci-image --output sboms/ oci-image \\\n    --snapshot snapshot.json\n</code></pre>"},{"location":"sboms/oci_image_augmentation/#augmentation-examples","title":"Augmentation examples","text":"<p>Here is an example of what gets updated by <code>mobster augment oci-image</code>. The following example uses the SPDX-2.3 format and a single-arch image. Let's assume we have the following snapshot spec file:</p> <pre><code>{\n  \"components\": [\n    {\n      \"name\": \"mobster-demo\",\n      \"containerImage\": \"quay.io/redhat-prod/mobster-demo@sha256:&lt;digest&gt;\",\n      \"rh-registry-repo\": \"registry.redhat.io/mobster-demo\",\n      \"repository\": \"quay.io/redhat-prod/mobster-demo\",\n      \"tags\": [\"1.0\", \"latest\"]\n    }\n  ]\n}\n</code></pre> <p>The following is an excerpt from the build-time SBOM, specifically the SPDX package for our single-arch component:</p> <pre><code>{\n  ...\n  \"SPDXID\": \"SPDXRef-image\",\n  \"externalRefs\": [\n    {\n      \"referenceLocator\": \"pkg:oci/mobster-demo@sha256:&lt;digest&gt;?repository_url=quay.io/redhat-user-workloads/mobster-demo\",\n      \"referenceType\": \"purl\",\n      \"referenceCategory\": \"PACKAGE-MANAGER\"\n    }\n  ]\n  ...\n}\n</code></pre> <p>We can now run the command:</p> <pre><code>$ mobster augment oci-image --output sboms/ snapshot \\\n    --snapshot snapshot.json\n</code></pre> <p>Mobster now parses the snapshot and fetches the build-time SBOM of all the images in it using <code>cosign</code>, based on the <code>containerImage</code> field. It then parses SBOM the SBOM and updates it with the data provided in the snapshot. That same package in the SBOM will look this after the augmentation:</p> <pre><code>{\n  ...\n  \"SPDXID\": \"SPDXRef-image\",\n  \"externalRefs\": [\n    {\n      \"referenceLocator\": \"pkg:oci/mobster-demo@sha256:&lt;digest&gt;?repository_url=registry.redhat.io/mobster-demo&amp;tag=1.0\",\n      \"referenceType\": \"purl\",\n      \"referenceCategory\": \"PACKAGE-MANAGER\"\n    },\n    {\n      \"referenceLocator\": \"pkg:oci/mobster-demo@sha256:&lt;digest&gt;?repository_url=registry.redhat.io/mobster-demo&amp;tag=latest\",\n      \"referenceType\": \"purl\",\n      \"referenceCategory\": \"PACKAGE-MANAGER\"\n    }\n  ]\n  ...\n}\n</code></pre> <p>Notice that an additional ref was added to account for two tags and the <code>repository_url</code> field in the PURLs was updated with our release repository.</p>"},{"location":"sboms/oci_index_sbom/","title":"SBOM for Image Index","text":"<p>The Mobster tool is capable of generating SBOMs for OCI image indexes based on the guidelines from the Red Hat Product Security.</p>"},{"location":"sboms/oci_index_sbom/#usage","title":"Usage","text":"<pre><code># First get index manifest using buildah\nbuildah manifest inspect registry.redhat.io/ubi10-beta/ubi@sha256:f817eb70b083c93b4d6b47e1daae292d662e3427f5e73c5e8f513695e5afc7cc &gt; ./index-image-manifest.json\n\n# Then generate SBOM using Mobster\nmobster generate \\\n    --output index.sbom.spdx.json \\\n    oci-index \\\n    --index-image-pullspec \"registry.redhat.io/ubi10-beta/ubi:latest\" \\\n    --index-image-digest \"sha256:f817eb70b083c93b4d6b47e1daae292d662e3427f5e73c5e8f513695e5afc7cc\" \\\n    --index-manifest-path ./index-image-manifest.json\n</code></pre> <p>List of arguments:</p> <ul> <li><code>--index-image-pullspec</code></li> <li>Must be in the format <code>repository/image:tag</code></li> <li>Example value <code>registry.redhat.io/ubi10-beta/ubi:latest</code></li> <li><code>--index-image-digest</code></li> <li>Must be in the format <code>algorithm:hexvalue</code></li> <li>Example value <code>sha256:f817eb70b083c93b4d6b47e1daae292d662e3427f5e73c5e8f513695e5afc7cc</code></li> <li><code>--index-manifest-path</code></li> <li>Path to a file containing a json output of <code>buildah manifest inspect</code> command</li> <li>File contents MUST be a valid JSON</li> <li>See example in index_manifest.json</li> <li><code>--output</code></li> <li>Path where the SBOM should be written</li> </ul>"},{"location":"sboms/oci_index_sbom/#example","title":"Example","text":"<p>The example SBOM generated by the above command is available in tests/data/index_manifest_sbom.spdx.json.</p>"},{"location":"sboms/oci_index_sbom/#structure-of-the-generated-sbom","title":"Structure of the generated SBOM","text":"<p>The generated SBOM has following structure:</p> <pre><code> - SPDXRef-DOCUMENT\n    - SPDXRef-image-index (DESCRIBES)\n        - Image-amd64 (VARIANT_OF)\n        - Image-arm64 (VARIANT_OF)\n        - Image-ppc64le (VARIANT_OF)\n        - Image-s390x (VARIANT_OF)\n</code></pre> <p></p>"},{"location":"sboms/product/","title":"Product SBOM generation","text":"<p>Mobster supports generating so-called \"Product SBOMs\" that allow linking the Konflux components being released with a Red Hat product.</p> <pre><code>$ mobster generate product \\\n    --release-data data.json \\\n    --snapshot snapshot.json &gt; product.json\n</code></pre>"},{"location":"sboms/product/#example-generation","title":"Example generation","text":"<p>Here is an example of a release data json document:</p> <pre><code>{\n  \"releaseNotes\": {\n    \"productName\": \"Product\",\n    \"productVersion\": \"1.0\",\n    \"cpe\": [\n      \"cpe:/a:redhat:product:1.0::el9\",\n      \"cpe:/a:redhat:product:1.0::el10\",\n    ]\n  }\n}\n</code></pre> <p>Now we need a mapped snapshot spec file to pair the SBOM with the released components:</p> <pre><code>{\n  \"components\": [\n    {\n      \"name\": \"mobster-demo\",\n      \"containerImage\": \"quay.io/redhat-prod/mobster-demo@sha256:b26c754d32aa87cddc1f1ae8edefaf24cc137ca13c32a663ed082f665d3e49e8\",\n      \"rh-registry-repo\": \"registry.redhat.io/mobster-demo\",\n      \"repository\": \"quay.io/redhat-prod/mobster-demo\",\n      \"tags\": [\"1.0\", \"latest\"]\n    }\n  ]\n}\n</code></pre> <p>After running the generate product command with the release data and the snapshot, we get an SBOM that links the CPEs and product data in the release data file with the components being released:</p> <pre><code>{\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"creationInfo\": {\n        \"created\": \"2025-06-09T09:48:54Z\",\n        \"creators\": [\n            \"Organization: Red Hat\",\n            \"Tool: Konflux CI\",\n            \"Tool: Mobster-0.1.0\"\n        ]\n    },\n    \"dataLicense\": \"CC0-1.0\",\n    \"name\": \"Product-1.0\",\n    \"spdxVersion\": \"SPDX-2.3\",\n    \"documentNamespace\": \"https://konflux-ci.dev/spdxdocs/Product-1.0-3ae914a2-eb6d-44e0-a144-0b0bf49f5178\",\n    \"packages\": [\n        {\n            \"SPDXID\": \"SPDXRef-product\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"SECURITY\",\n                    \"referenceLocator\": \"cpe:/a:redhat:product:1.0::el9\",\n                    \"referenceType\": \"cpe22Type\"\n                },\n                {\n                    \"referenceCategory\": \"SECURITY\",\n                    \"referenceLocator\": \"cpe:/a:redhat:product:1.0::el10\",\n                    \"referenceType\": \"cpe22Type\"\n                },\n            ],\n            \"filesAnalyzed\": false,\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"name\": \"Product\",\n            \"supplier\": \"Organization: Red Hat\",\n            \"versionInfo\": \"1.0\"\n        },\n        {\n            \"SPDXID\": \"SPDXRef-mobster-demo\",\n            \"checksums\": [\n                {\n                    \"algorithm\": \"SHA256\",\n                    \"checksumValue\": \"b26c754d32aa87cddc1f1ae8edefaf24cc137ca13c32a663ed082f665d3e49e8\"\n                }\n            ],\n            \"downloadLocation\": \"NOASSERTION\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"PACKAGE_MANAGER\",\n                    \"referenceLocator\": \"pkg:oci/mobster-demo@sha256:b26c754d32aa87cddc1f1ae8edefaf24cc137ca13c32a663ed082f665d3e49e8?repository_url=registry.redhat.io/mobster-demo&amp;tag=1.0\",\n                    \"referenceType\": \"purl\"\n                },\n                {\n                    \"referenceCategory\": \"PACKAGE_MANAGER\",\n                    \"referenceLocator\": \"pkg:oci/demo@sha256:b26c754d32aa87cddc1f1ae8edefaf24cc137ca13c32a663ed082f665d3e49e8?repository_url=registry.redhat.io/mobster-demo&amp;tag=latest\",\n                    \"referenceType\": \"purl\"\n                }\n            ],\n            \"filesAnalyzed\": false,\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"name\": \"demo\",\n            \"supplier\": \"Organization: Red Hat\"\n        }\n    ],\n    \"relationships\": [\n        {\n            \"spdxElementId\": \"SPDXRef-DOCUMENT\",\n            \"relatedSpdxElement\": \"SPDXRef-product\",\n            \"relationshipType\": \"DESCRIBES\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-mobster-demo\",\n            \"relatedSpdxElement\": \"SPDXRef-product\",\n            \"relationshipType\": \"PACKAGE_OF\"\n        }\n    ]\n}\n</code></pre>"},{"location":"sboms/product/#structure-of-the-generated-sbom","title":"Structure of the generated SBOM","text":"<p>The generated SBOM has following structure:</p> <pre><code> - SPDXRef-DOCUMENT\n    - SPDXRef-product (DESCRIBES)\n        - Component XYZ (PACKAGE_OF)\n        - Component ABC (PACKAGE_OF)\n</code></pre>"},{"location":"sboms/sbom_lifecycle/","title":"SBOM lifecycle","text":"<p>The lifecycle of a Software Bill of Materials (SBOM) involves several stages.</p> <p>The pipeline responsible for building and releasing software artifacts (Konflux) is also responsible for SBOM generation and management.</p> <p>The SBOM lifecycle can be divided into three main phases:</p> <ul> <li>Build phase</li> <li>Release phase</li> <li>Incident response</li> </ul> <p>An overview of the SBOM lifecycle is shown below:</p> <p></p> <p>For each of these phases, Mobster provides specific commands to generate augment or upload SBOMs.</p> <ul> <li><code>mobster generate</code> - used to generate SBOMs for different content types</li> <li><code>mobster augment</code> - used to augment SBOMs with additional information</li> <li><code>mobster upload</code> - used to release SBOMs to target locations</li> </ul>"},{"location":"sboms/sbom_lifecycle/#build-phase","title":"Build phase","text":"<p>In the build phase, the pipeline produces an software artifact from the source code. At this point Mobster generates an SBOM for given artifact based on its content type. At this moment Mobster supports SBOM generation for the following content types:</p> <ul> <li>OCI image</li> <li>OCI index image</li> <li>OCI artifact</li> <li>Modelcar</li> </ul> <p>Each of these content types has its own specific command to generate SBOM and also has its own specific structure and inputs.</p> <p>Generaly SBOMs are generated using following inputs based on the content type:</p> <ul> <li>Syft scan</li> <li>Hermeto SBOM</li> <li>Image pullspec</li> <li>Index manifest</li> <li>Dockerfile</li> <li>Modelcar image pullspecs</li> </ul>"},{"location":"sboms/sbom_lifecycle/#release-phase","title":"Release phase","text":"<p>SBOM produced in the build phase are ussually not suitable for public consumption. In the build phase we don't know the final target of the artiface from where a customer will pull it.</p> <p>Due to this limiration, the SBOMs generated in the build phase are augmented in the release phase. The release phase is responsible for producing a final SBOM that is suitable for public consumption.</p> <p>The general process of the release phase is as follows:</p> <ol> <li>The SBOMs generated in the build phase are collected.</li> <li>The SBOMs are augmented with additional information such as:</li> <li>Image pullspec of published image</li> <li>Product name</li> <li>Product version</li> <li>CPE IDs</li> </ol>"},{"location":"sboms/sbom_lifecycle/#incident-response","title":"Incident response","text":"<p>At the end of both the build and release phases, the SBOMs are stored in a centralized location. The Trustify project has been chosen as the central location for SBOM storage and management.</p> <p>Since all released SBOMs are stored in a central location, they can be used by the Product Security team to detect potential vulnerabilities in the software components used in the released artifacts.</p> <p>The Trustify project provides a way to query SBOMs and their components to find out if a specific component is used in a released artifact. Using this information, the Product Security team can quickly identify which artifacts are affected by a specific vulnerability and take appropriate actions.</p> <p>On top of that, SBOMs are also pushed into a container registry to allow users to pull them directly from the registry. This allows users to easily access SBOMs for the artifacts they are using and to verify the components used in those artifacts.</p>"},{"location":"sboms/upload/","title":"Uploading SBOMs with Mobster","text":"<p>The Mobster tool is capable of uploading SBOMs to multiple locations.</p>"},{"location":"sboms/upload/#red-hat-trusted-profile-analyzer-tpa","title":"Red Hat Trusted Profile Analyzer (TPA)","text":"<p>To upload an SBOM to TPA, use the <code>mobster upload tpa</code> command. In order to authenticate to TPA, you need to set the following environment variables with OIDC, as in the example below</p> <pre><code>MOBSTER_TPA_SSO_TOKEN_URL=\"https://example.com/auth/realms/ExampleRealm/protocol/openid-connect/token\"\nMOBSTER_TPA_SSO_ACCOUNT=example-account\nMOBSTER_TPA_SSO_TOKEN=example-account-token\n</code></pre> <p>After that you can either upload a single SBOM:</p> <pre><code>mobster upload tpa \\\n    --tpa-base-url https://your-tpa-instance.com \\\n    --file /path/to/your/sbom.json\n</code></pre> <p>Or multiple SBOM files from a directory with an option to set a number of parallel workers:</p> <pre><code>mobster upload tpa \\\n    --tpa-base-url https://your-tpa-instance.com \\\n    --from-dir /path/to/sbom_directory \\\n    --workers 4\n</code></pre>"}]}