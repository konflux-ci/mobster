#!/usr/bin/env bash
# Upload failed SBOM files to S3 bucket for retry processing
#
# Parameters:
#   --data-dir:        Base directory containing input files and where outputs will be stored
#   --retry-s3-bucket: S3 bucket name where failed SBOMs will be uploaded
#   --failed-dir:      Directory containing failed SBOM files to upload
#
# Dependencies:
#   Input files:
#     - Failed SBOM files in ${failed_dir}/ directory
#
#   Previous pipeline steps:
#     - upload_sboms_to_atlas step that populates failed_dir with failed uploads
#
#   Environment variables (required):
#     - AWS_ACCESS_KEY_ID: AWS access key for S3 authentication
#     - AWS_SECRET_ACCESS_KEY: AWS secret key for S3 authentication
#
# Output:
#   - SBOM files uploaded to s3://${retry_s3_bucket}/
#   - Failed directory cleaned up after successful upload to S3
set -eux

OPTS=$(getopt -o '' --long data-dir:,retry-s3-bucket:,failed-dir: -- "$@")
eval set -- "$OPTS"

data_dir=""
retry_s3_bucket=""
failed_dir=""

while true; do
    case "$1" in
        --data-dir)
            data_dir="$2"
            shift 2
            ;;
        --retry-s3-bucket)
            retry_s3_bucket="$2"
            shift 2
            ;;
        --failed-dir)
            failed_dir="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Invalid option: $1" >&2
            exit 1
            ;;
    esac
done

if [[ -z "$data_dir" || \
      -z "$retry_s3_bucket" || \
      -z "$failed_dir" \
      ]]; then
    echo "Error: missing required argument or is empty" >&2
    exit 1
fi

required_vars=(
  "AWS_ACCESS_KEY_ID"
  "AWS_SECRET_ACCESS_KEY"
)

set +x
for var_name in "${required_vars[@]}"; do
    if [ -z "${!var_name}" ]; then
        >&2 echo "Environment variable '$var_name' is not defined or is empty. Skipping S3 upload."
        exit 0
    fi
done
set -x


aws s3 cp "$failed_dir" s3://${retry_s3_bucket}/ --recursive

# remove all uploaded SBOMs, so that a final report can be generated in a
# further step.
rm -f "${failed_dir}/*"
