#!/usr/bin/env bash
# Upload SBOMs to Atlas TPA service with retry mechanism for failed uploads
#
# Parameters:
#   --data-dir:      Base directory containing input files and where outputs will be stored
#   --atlas-api-url: Base URL for the Atlas TPA API endpoint
#   --sbom-path:     Relative path within data-dir containing SBOMs to upload
#   --report-path:   Path where upload report will be written
#   --failed-dir:    Directory where failed SBOM files will be copied for retry
#
# Dependencies:
#   Input files:
#     - SBOM files in ${data_dir}/${sbom_path}/ directory
#
#   Environment variables (required):
#     - MOBSTER_TPA_SSO_ACCOUNT: TPA SSO account identifier
#     - MOBSTER_TPA_SSO_TOKEN: TPA SSO authentication token
#     - MOBSTER_TPA_SSO_TOKEN_URL: TPA SSO token endpoint URL
#
# Output:
#   - TPA Upload report at ${report_path}
#   - Failed SBOM files copied to ${failed_dir}/ (if any uploads fail with transient errors)
set -ux

OPTS=$(getopt -o '' --long data-dir:,atlas-api-url:,sbom-path:,report-path:,failed-dir: -- "$@")
eval set -- "$OPTS"

data_dir=""
atlas_api_url=""
sbom_path=""
failed_dir=""
report_path=""

while true; do
    case "$1" in
        --data-dir)
            data_dir="$2"
            shift 2
            ;;
        --atlas-api-url)
            atlas_api_url="$2"
            shift 2
            ;;
        --sbom-path)
            sbom_path="$2"
            shift 2
            ;;
        --report-path)
            report_path="$2"
            shift 2
            ;;
        --failed-dir)
            failed_dir="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Invalid option: $1" >&2
            exit 1
            ;;
    esac
done

if [[ -z "$data_dir" || \
      -z "$atlas_api_url" || \
      -z "$sbom_path" || \
      -z "$report_path" || \
      -z "$failed_dir" \
      ]]; then
    echo "Error: missing required argument or argument is empty" >&2
    exit 1
fi

required_vars=(
  "MOBSTER_TPA_SSO_ACCOUNT"
  "MOBSTER_TPA_SSO_TOKEN"
  "MOBSTER_TPA_SSO_TOKEN_URL"
)

set +x
for var_name in "${required_vars[@]}"; do
    if [ -z "${!var_name}" ]; then
        >&2 echo "Environment variable '$var_name' is not defined or is empty. Skipping TPA upload."
        exit 0
    fi
done
set -x

sbom_path="${data_dir}/${sbom_path}"
mkdir -p "$failed_dir"

if [[ $(find "$sbom_path" -type f | wc -l) -eq 0 ]]; then
    >&2 echo "Error: no SBOMs to upload found."
fi

mobster --verbose upload tpa \
  --tpa-base-url "$atlas_api_url" \
  --from-dir "$sbom_path" \
  --report > "$report_path"

upload_exit_code=$?

cat "$report_path" | jq

if [[ $upload_exit_code -eq 2 ]]; then
  # Exit code 2 indicates that the script failed with transient errors.
  # Extract the paths of SBOMs that failed to push using jq (one path per line).
  # Then use xargs to copy all the failed SBOM files to a directory, from
  # which the upload-sboms-to-s3 step will push to S3.
  jq '.failure[]' "$report_path" | \
    xargs -I {} cp {} "$failed_dir"
elif [[ $upload_exit_code -ne 0 ]]; then
  exit $upload_exit_code
fi
